Batch Processing
===============
Batch processing is used to declare multiple queries to batch and makes a single call to the database.

To add the queries to the batch we need to use addBatch() method of Statement object.

To execute the batch we need to use executeBatch() method of Statement object.

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		//declare the queries
		String qry1="insert into student values(103,'ramana','vizag')";
		String qry2="delete from student where sno=102";
		String qry3="update student set sname='rani' where sno=101";
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		
		System.out.println("No of records effected are = "+sum);
	}
}


Transaction Management
=====================
Transaction means a single unit of work.

We commit if transaction done successfully.

We rollback if transaction failed.

Diagram: jdbc5.1


SBI Table
==========
drop table sbi;

create table sbi(accno number(6), accholder varchar2(10),accbal number(10));

insert into sbi values(100001,'sai',5000);

insert into sbi values(200002,'devraj',6000);

commit;

KOTAK Table
============
drop table kotak;

create table kotak(accno number(6),accholder varchar2(10),accbal number(10));

insert into kotak values(111111,'sharath',90000);

insert into kotak values(222222,'babu',80000);

commit;


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the source account number :");
		int sno=sc.nextInt();
		
		System.out.println("Enter the destination account number :");
		int dno=sc.nextInt();
		
		System.out.println("Enter the amount to transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		//set auto complete off 
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		String qry1="update kotak set accbal=accbal-"+amt+" where accno="+sno;
		String qry2="update sbi set accbal=accbal+"+amt+" where accno="+dno;
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch 
		int[] result=st.executeBatch();
		
		boolean flag=true;
		
		for(int i:result)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
	
		if(flag==true)
		{
			System.out.println("Transaction Done successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed ");
			con.rollback();
		}
		
		st.close();
		con.close();
	}
}

Types of ResultSet Object
=========================
We have two types of ResultSet object.

1) Non-Scrollable ResultSet object

2) Scrollable ResultSet object

Diagram: jdbc5.2

1) Non-Scrollable ResultSet object
-----------------------------------
A ResultSet object which allows us to read the records sequentially, uni-directionally is called non-scrollable ResultSet object.

By default every ResultSet object is a non-scrollable ResultSet object.

If JDBC Statement object is create without TYPE , MODE value then that ResultSet object is called non-scrollable ResultSet object.

ex:
	Statement st =con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2) Scrollable ResultSet object
-------------------------------
If a ResultSet object which allows us to read the records non-sequentially, bi-directionally  or randomly is called Scrollalbe ResultSet object.

If JDBC Statement object is created with TYPE,MODE value then that ResultSet object is called 
Scrollable ResultSet object.

ex:
	Statement st =con.createStatement(TYPE_VALUE,MODE_VALUE);
	ResultSet rs=st.executeQuery("select * from student");

Note:
-----
	We have following list of TYPE values.
	ex:
		ResultSet.TYPE_SCROLL_SENSITIVE 
		ResultSet.TYPE_SCROLL_INSENSITIVE

	We have following list of MODE values.
	ex:
		ResultSet.CONCUR_UPDATABLE
		ResultSet.CONCUR_READ_ONLY

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableRSApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		//bottom to top 
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));

		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		
		rs.close();
		st.close();
		con.close();
	}
}


Steps to interact with MYSQL Database 
=====================================

https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.0.31/


step1:
------
	Download and Install MYSQL Database.
	ex:
		https://dev.mysql.com/downloads/installer/


step2:
----
	Copy "bin" directory of mysql database and paste in environmental variables.
	ex:
	 


JDBC Application to interact with MySQL Database
=================================================

step1:
------
	Download and Installed MySQL database software.
	ex:
		https://dev.mysql.com/downloads/installer/

step2:
--------
	Connect with mysql by using password.
	ex:
	username : root( default)
	password: root

step3:
-------
	create a SCHEMA in MYSQL.
	ex:
		create schema IH_JAVA_036

step4:
-------
	To check list of databases /schemas present in mysql db.
	ex:
		show databases;

step5:
-------
	Use IH_JAVA_014 scheme/database.	
	ex:
		use   IH_JAVA_036;

step6:
---------
	create a student table and insert the records.
	ex:
	create table student(sno int(3),sname varchar(10),sadd varchar(10));
	insert into student values(101,'raja','hyd');
	insert into student values(102,'raju','delhi');
	insert into student values(103,'ravi','pune');
	commit;
step7:
---------
	create a JDBC Application to select student records.

MySQLApp.java
------------------------
package com.ge.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class MySQLApp {

	public static void main(String[] args) {
		
		final String DRIVER="com.mysql.jdbc.Driver";
		final String URL="jdbc:mysql://localhost:3306/IH_JAVA_036";
		final String USERNAME="root";
		final String PASSWORD="root";
		final String QUERY="select * from student";
		
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con=DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st=con.createStatement();
			rs=st.executeQuery(QUERY);
			while(rs.next())
			{
				System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		

	}

}



	
step8:
--------
	Add "mysql-connector.jar" file in project build path for mysql database.

	right click to project --> built path --> configuration build path --> libraries
	--> add external jars --> select mysql-connector.jar file --> open.


	jar file download : 		

	https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.0.31/

	

	Note:
	ojdbc14.jar  - - for oracle 	
	mysql-connector.jar -->  for mysql 

step9:
--------
	Run the jdbc application.




JDBC Application to interact  with MongoDB Database
====================================================

step1:
-----
	Download and install MongoDB Community Server.
	ex:
		https://www.mongodb.com/try/download/community

step2:
-----
	Downoad and install MongoDB Shell.
	ex:
		https://www.mongodb.com/try/download/shell

step3:
------
	Extract Mongodb shell inside "MongoDB" folder.
	ex:
		C:\Program Files\MongoDB

step4:
------
	Copy "bin" directory of mongoshell.
	ex:
		C:\Program Files\MongoDB\mongosh-2.3.0-win32-x64\bin

step5:
-----
	Paste "bin" directory in environmental variables.
	ex:
		right click to This PC --> properties --> Advanced System Settings -->
		Environmental variables -->  System variables --> click to path --> click to edit 
		button --> New --> paste (C:\Program Files\MongoDB\mongosh-2.3.0-win32-x64\bin) -->ok
		--->ok  --->ok.

step6:
-----
	Launch Eclipse IDE by choosing workspace location.

step7:
-----
	Create MongoDBProj inside eclipse IDE.

	ex:
		File --> New --> Java project --> Name : MongoDBProj --> Next --> Finish.

step8:
-----
	Download and add mongodb jar file in project build path.
	ex:
		jar file link : https://repo1.maven.org/maven2/org/mongodb/mongo-java-driver/3.11.2/


	right click to MongoDBProj --> Buildpath --> configure build path --> libraries -->
	click to classpath --> add external jars --> select mongo-java-driver.jar file --> 
	Open --> Apply and close.

step9:
------
	Create a "com.ihub.www" package inside "src" folder.

step10:
------
	Create a InsertApp.java file inside "com.ihub.www" package.

SelectApp.java
--------------
package com.ihub.www;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class InsertApp 
{
	public static void main(String[] args) 
	{
		try(MongoClient mongoClient=MongoClients.create("mongodb://localhost:27017");)
		{
			MongoDatabase mongoDatabase=mongoClient.getDatabase("myDatabase");
			
			MongoCollection<Document> mongoCollection=mongoDatabase.getCollection("myCollection");
			
			Document doc=new Document("id", 101)
							.append("name","Alan")
							.append("add","Hyd");
			
			mongoCollection.insertOne(doc);
			
			System.out.println("Record Inserted in MongoDB");
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

step11:
-------
	Run the jdbc application.



Q) Write a jdbc application to read the record from mongodb?

package com.ihub.www;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class SelectApp 
{
	public static void main(String[] args) 
	{
		try(MongoClient mongoClient=MongoClients.create("mongodb://localhost:27017");)
		{
			MongoDatabase mongoDatabase=mongoClient.getDatabase("myDatabase");
			
			MongoCollection<Document> mongoCollection=mongoDatabase.getCollection("myCollection");
			
			Document findDocument=mongoCollection.find(new Document("id",101)).first();
			
			System.out.println(findDocument.toJson());
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}














